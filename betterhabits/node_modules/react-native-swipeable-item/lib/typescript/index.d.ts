import React, { ForwardedRef } from "react";
import Animated, { WithSpringConfig } from "react-native-reanimated";
export declare enum OpenDirection {
    LEFT = "left",
    RIGHT = "right",
    NONE = "none"
}
declare type OpenCloseOptions = {
    animated?: boolean;
};
declare type OpenPromiseFn = (snapPoint?: number, options?: OpenCloseOptions) => Promise<void>;
declare type ClosePromiseFn = (options?: OpenCloseOptions) => Promise<void>;
export declare type UnderlayParams<T> = {
    item: T;
    open: OpenPromiseFn;
    close: ClosePromiseFn;
    percentOpen: Animated.DerivedValue<number>;
    isGestureActive: Animated.DerivedValue<boolean>;
    direction: OpenDirection;
};
export declare type OverlayParams<T> = {
    item: T;
    openLeft: OpenPromiseFn;
    openRight: OpenPromiseFn;
    close: ClosePromiseFn;
    openDirection: OpenDirection;
    percentOpenLeft: Animated.DerivedValue<number>;
    percentOpenRight: Animated.DerivedValue<number>;
};
export declare type RenderUnderlay<T> = (params: UnderlayParams<T>) => React.ReactNode;
export declare type RenderOverlay<T> = (params: OverlayParams<T>) => React.ReactNode;
declare type Props<T> = {
    item: T;
    children?: React.ReactNode;
    renderOverlay?: RenderOverlay<T>;
    renderUnderlayLeft?: RenderUnderlay<T>;
    renderUnderlayRight?: RenderUnderlay<T>;
    onChange?: (params: {
        openDirection: OpenDirection;
        snapPoint: number;
    }) => void;
    overSwipe?: number;
    animationConfig?: Partial<WithSpringConfig>;
    activationThreshold?: number;
    swipeEnabled?: boolean;
    snapPointsLeft?: number[];
    snapPointsRight?: number[];
    swipeDamping?: number;
};
export declare type SwipeableItemImperativeRef = {
    open: (openDirection: OpenDirection, snapPoint?: number, options?: OpenCloseOptions) => Promise<void>;
    close: ClosePromiseFn;
};
declare const _default: <T>(props: Props<T> & {
    ref?: React.ForwardedRef<SwipeableItemImperativeRef> | undefined;
}) => React.ReactElement;
export default _default;
export declare function useUnderlayParams<T>(): UnderlayParams<T>;
export declare function useOverlayParams<T>(): OverlayParams<T>;
export declare function useSwipeableItemParams<T>(): {
    open: (snapPoint?: number | undefined, direction?: OpenDirection | undefined) => Promise<void>;
    percentOpen: Readonly<Animated.SharedValue<number>>;
    item: T;
    openLeft: OpenPromiseFn;
    openRight: OpenPromiseFn;
    close: ClosePromiseFn;
    openDirection: OpenDirection;
    percentOpenLeft: Readonly<Animated.SharedValue<number>>;
    percentOpenRight: Readonly<Animated.SharedValue<number>>;
};
