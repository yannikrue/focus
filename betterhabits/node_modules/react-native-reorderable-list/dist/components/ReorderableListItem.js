var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import Animated, { useAnimatedStyle, withTiming, Easing, useSharedValue, useAnimatedReaction, } from 'react-native-reanimated';
const ReorderableListItem = (_a) => {
    var { index, itemOffsets, draggedIndex, currentIndex, enabledOpacity, children } = _a, rest = __rest(_a, ["index", "itemOffsets", "draggedIndex", "currentIndex", "enabledOpacity", "children"]);
    const translateY = useSharedValue(0);
    const opacity = useSharedValue(1);
    useAnimatedReaction(() => currentIndex.value, () => {
        if (currentIndex.value >= 0 && draggedIndex.value >= 0) {
            const moveDown = currentIndex.value > draggedIndex.value;
            const startMove = Math.min(draggedIndex.value, currentIndex.value);
            const endMove = Math.max(draggedIndex.value, currentIndex.value);
            let newValue = 0;
            if (index === draggedIndex.value) {
                for (let i = startMove; i < endMove; i++) {
                    newValue = moveDown
                        ? newValue + itemOffsets[i].value.length
                        : newValue - itemOffsets[i].value.length;
                }
                const offsetCorrection = moveDown
                    ? itemOffsets[currentIndex.value].value.length -
                        itemOffsets[draggedIndex.value].value.length
                    : 0;
                newValue += offsetCorrection;
            }
            else if (index >= startMove && index <= endMove) {
                const draggedHeight = itemOffsets[draggedIndex.value].value.length;
                newValue = moveDown ? -draggedHeight : draggedHeight;
            }
            if (newValue !== translateY.value) {
                translateY.value = withTiming(newValue, {
                    duration: 100,
                    easing: Easing.out(Easing.ease),
                });
            }
        }
    });
    useAnimatedReaction(() => enabledOpacity.value, (enabled) => {
        opacity.value = enabled && index === draggedIndex.value ? 0 : 1;
    }, [index]);
    const animatedStyle = useAnimatedStyle(() => ({
        transform: [{ translateY: translateY.value }],
        opacity: opacity.value,
    }));
    return (React.createElement(Animated.View, Object.assign({}, rest, { style: [rest.style, animatedStyle] }), children));
};
export default ReorderableListItem;
